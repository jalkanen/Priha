<?xml version="1.0"?>

<!--

    Priha - A JSR-170 implementation library.

    Copyright (C) 2007-2009 Janne Jalkanen (Janne.Jalkanen@iki.fi)

    Licensed under the Apache License, Version 2.0 (the "License"); 
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at 
    
      http://www.apache.org/licenses/LICENSE-2.0 
      
    Unless required by applicable law or agreed to in writing, software 
    distributed under the License is distributed on an "AS IS" BASIS, 
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
    See the License for the specific language governing permissions and 
    limitations under the License. 

-->
<project name="Priha" default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
            Priha build file.
    </description>

	<property name="perftest.iterations" value="100"/>
	<property name="perftest.blobsize" value="10"/>
	
	<path id="path.build">
		<fileset dir="lib">
		          <include name="*.jar" />
		          <exclude name="jackrabbit*" />
		</fileset>
		      
		<fileset dir="tests/lib">
			<include name="*.jar" />
		</fileset>
	     
		<pathelement path="tests/etc" /> 
		<pathelement path="build" />
		<pathelement path="etc" />
		<pathelement path="src/java" />
       		<pathelement path="tests/tck" />
	</path>

    <path id="path.tests">
       <!-- <pathelement location="${jarfile}" />
       <pathelement location="${testjarfile}" /> -->
    	<path refid="path.build"/>
     
    	<pathelement path="tests/build" />

    	<!-- Jackrabbit is only included if it has been installed with maven -->
    	<fileset dir="${user.home}">
        	<include name=".maven/repository/org.apache.jackrabbit/jars/*-1.6.*.jar"/>
          	<include name=".m2/repository/commons-collections/**/*3.2.jar"/>
        	<include name=".m2/repository/org/apache/lucene/lucene-core/2.2.0/*.jar"/>
          	<include name=".m2/repository/org/apache/derby/derby/10.2.1.6/*.jar"/>
       	</fileset>
    </path>
   
	<!-- ================================= 
          target: resolve              
         ================================= -->
	<target name="resolve" description="--> retrieve dependencies with ivy" depends="init-ivy">
	     <ivy:retrieve />
	</target>

    <!-- ================================= 
          target: jar            
         ================================= -->
    <target name="jar" depends="compile" description="Builds the main JAR file">
     
        <java classpath="build" outputproperty="version" classname="org.priha.Release" 
              args="-versiononly">
        </java>   
     
        <echo>Building priha-${version}.jar</echo>   
        
        <jar destfile="build/priha-${version}.jar">
           <fileset dir="build">
              <include name="org/priha/**"/>
              <exclude name="**/*.jj"/>
	          <exclude name="**/*Test.class"/>
              <exclude name="**/*Tests.class"/>
           </fileset>
         <!--   
           <fileset dir="src/java">
              <include name="**/*.xml"/>
           </fileset>
           -->
            
           <fileset dir="etc">
              <include name="priha_default.properties"/>
           </fileset>
           <fileset dir=".">
              <include name="LICENSE"/>
           </fileset>
           <manifest>
             <attribute name="Built-By" value="${user.name}"/>
             <attribute name="Implementation-Vendor" value="Janne Jalkanen (jalkanen@ecyrd.com)"/>
             <attribute name="Implementation-Title" value="Priha Java Content Repository"/>
             <attribute name="Implementation-Version" value="${version}"/>
             <attribute name="Implementation-URL" value="http://www.priha.org/"/>
             <attribute name="Specification-Title" value="JSR-170 Java Content Repository"/>
             <attribute name="Main-Class" value="org/priha/Release"/>
           </manifest>   
        </jar>   
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: compile                      
         - - - - - - - - - - - - - - - - - -->
    <target name="compile" depends="resolve">
       <mkdir dir="build"/>
       
       <javac destdir="build"
              target="1.5"
              debug="on"
              optimize="on">
       	  <src path="src/java"/>
       	  <src path="src/generated-sources"/>
          <classpath refid="path.build"/>
       </javac>
    </target>

	<target name="compiletests" depends="compile">
		<mkdir dir="tests/build"/>
		
		<javac destdir="tests/build"
			   target="1.5"
			   debug="on">
			<src path="tests/java"/>
			<src path="tests/tck"/>
			<classpath refid="path.build"/>
		</javac>
	</target>
	
	<!-- Looks like this creates an invalid JJT file.  It needs
	     some manual editing, so we'll just generate it once
	     and check it into SVN. -->
	<target name="xpath-jjt">
		<mkdir dir="src/generated-sources"/>
		<xslt style="src/javacc/xpath/strip.xsl"
			in="src/javacc/xpath/xpath-grammar.xml"
			out="src/generated-sources/stripped-xpath-grammar.xml"
			force="yes"/>
		<xslt style="src/javacc/xpath/jjtree-priha.xsl"
			in="src/generated-sources/stripped-xpath-grammar.xml"
			out="src/javacc/xpath/XPath.jjt"
			force="yes"/>
	</target>
	
	<target name="generatedsources">
		<delete dir="src/generated-sources/org/priha/query/aqt/xpath"/>
		<mkdir dir="src/generated-sources/org/priha/query/aqt/xpath"/>
		<jjtree target="src/javacc/xpath/XPath.jjt"
		        outputdirectory="src/generated-sources/org/priha/query/aqt/xpath"
		        javacchome="${user.home}/Java/javacc-3.2"
		        nodepackage="org.priha.query.aqt.xpath"/>
		<javacc target="src/generated-sources/org/priha/query/aqt/xpath/XPath.jj"
				javacchome="${user.home}/Java/javacc-3.2"
				outputdirectory="src/generated-sources/org/priha/query/aqt/xpath"/>
		<!-- We have our own implementation of SimpleNode -->
		<delete file="src/generated-sources/org/priha/query/aqt/xpath/SimpleNode.java"/>
	</target>
	
    <target name="clean">
     
        <delete dir="build"/>
   		<delete dir="tests/build"/>
    	
    </target>
 
    <target name="javadoc">
       <mkdir dir="doc/javadoc"/>
       <javadoc destdir="doc/javadoc">
          <packageset dir="src/java">
            <include name="org/priha/**" />
          </packageset>
        <packageset dir="src/generated-sources">
          <include name="org/priha/**" />
        </packageset>
          <classpath>
             <fileset dir="lib">
               <include name="*.jar"/>  
             </fileset> 
          </classpath> 
       </javadoc> 
    </target> 
 
	<!--
	 	Runs some performance tests.  You may specify new values for the parameters via
	 	
	 	ant -Dperftest.iterations=[num] -Dperftest.blobsize=[num] perftests
	 	
	 	perftest.iterations=how large the repository should be (in Nodes)
	 	perftest.blobsize=how large blobs should be stored into the store
	-->
    <target name="perftests" depends="compile,compiletests">
       <mkdir dir="tests/reports"/>
       <mkdir dir="/tmp/reports"/>
        
       <delete dir="repository" />
        
    	<echo message="Running performancetests on a repository size ${perftest.iterations} nodes and ${perftest.blobsize} kB blobs"/>
    	
       <junit printsummary="yes" haltonfailure="no" fork="yes">
        <classpath>
           <path refid="path.tests" />
        </classpath>
        <formatter type="plain" />
        <formatter type="xml" usefile="yes" />
        <batchtest todir="tests/reports">
           <fileset dir="tests/java">
                <include name="**/PerformanceTest.java" />
           </fileset>
        </batchtest>
        <jvmarg line="-Xmx2048m -Dperftest.iterations=${perftest.iterations} -Dperftest.blobsize=${perftest.blobsize} -Dcom.sun.management.jmxremote"/>
       </junit>  
     

        <junitreport todir="/tmp/reports">
           <fileset dir="tests/reports">
              <include name="**/TEST-*.xml" />
           </fileset>
           <report format="noframes" todir="/tmp/reports" />
        </junitreport>   
    </target>  

	<!--
	   Runs the entire JCR test suite.
	-->
	<target name="jcrtestsuite" depends="compile,compiletests">
		<mkdir dir="tests/reports"/>
		
	    <junit printsummary="yes" haltonfailure="no" fork="yes">
	        <classpath>
	           <path refid="path.build" />
	        	<pathelement location="tests/build"/>
	        </classpath>
	        <formatter type="plain" />
	        <formatter type="xml" usefile="yes" />
	        <test todir="tests/reports" name="org.apache.jackrabbit.test.JCRTestSuite"/>
	        <jvmarg line="-Xmx2048m"/>
	       </junit>  
	     

	        <junitreport todir="tests/reports">
	           <fileset dir="tests/reports">
	              <include name="TEST-org.apache.jackrabbit.test.JCRTestSuite.xml" />
	           </fileset>
	           <report format="noframes" todir="tests/reports" />
	        </junitreport>   
	</target>
	
	<!-- ***************************************************************** -->
	
	<!--
	
	      Distribution package building.
	      
	      Use "ant dist" to build the distro package, and
	      "ant srczip" to create a source tarball.
	      
	  -->

	<target name="srczip" depends="compile">
        <java classpath="build" outputproperty="version" classname="org.priha.Release" 
              args="-versiononly">
        </java>   

		<zip zipfile="build/priha-${version}-src.zip">
			<zipfileset dir="." 
				excludes="build/** tests/build/** repository*/** tests/reports/** *.log doc/javadoc/**" 
				prefix="priha-${version}"/>
		</zip>
	</target>
	
	<target name="dist" depends="jar,javadoc">
        <java classpath="build" outputproperty="version" classname="org.priha.Release" 
              args="-versiononly">
        </java>   

		<zip zipfile="build/priha-${version}-bin.zip">
			<zipfileset dir="build" includes="*.jar" prefix="priha-${version}"/>
			<zipfileset dir="." includes="ChangeLog README LICENSE NOTICE doc/**" prefix="priha-${version}"/>
			<zipfileset dir="lib" includes="jcr-*.jar" prefix="priha-${version}"/>
			<zipfileset dir="lib" includes="ehcache-*.jar hsqldb-*.jar" prefix="priha-${version}/extras-lib"/>
		</zip>
	</target>
	
	<!--
	
		Installs the distribution archives by checking out the SVN project.
		
		Needs svn and gpg binaries in the shell path.
	
	  -->
	<target name="dist-install" depends="srczip,dist">
        <java classpath="build" outputproperty="version" classname="org.priha.Release" 
              args="-versiononly">
        </java>   

		<!-- Check out code -->
		<exec executable="svn">
			<arg value="co"/>
			<arg value="https://svn.ecyrd.com/repos/priha/site"/>
			<arg value="build/priha-site"/>	
		</exec>
		
		<!-- Install archives -->
		<property name="destdir" value="build/priha-site/WebContent/download/priha-${version}"/>
		<delete dir="${destdir}"/>
		<mkdir dir="${destdir}"/>
		<copy file="build/priha-${version}-bin.zip" todir="${destdir}"/>
		<copy file="build/priha-${version}-src.zip" todir="${destdir}"/>
		
		<exec executable="gpg">
			<arg value="-sba"/>
			<arg value="${destdir}/priha-${version}-src.zip"/>
		</exec>

		<exec executable="gpg">
			<arg value="-sba"/>
			<arg value="${destdir}/priha-${version}-bin.zip"/>
		</exec>

		<!-- Figure out file lengths. We need a bit of Javascript to build the
		     sizes in megabytes -->
		<length file="build/priha-${version}-bin.zip" property="binsize"/>
		<length file="build/priha-${version}-src.zip" property="srcsize"/>
		
		<script language="javascript">
			<![CDATA[
				var binsize = project.getProperty("binsize");
				var srcsize = project.getProperty("srcsize");
				var binmegas = Math.round((binsize / (1024*1024)) * Math.pow(10,2)) / Math.pow(10,2);
				var srcmegas = Math.round((srcsize / (1024*1024)) * Math.pow(10,2)) / Math.pow(10,2);
				project.setNewProperty("binsizemegs", binmegas);
				project.setNewProperty("srcsizemegs", srcmegas);
			]]>
		</script>

		<!-- Modify page -->
		<loadfile property="message" srcFile="build/priha-site/downloadmessage.html">
			<filterchain>
		    	<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
		      		<param type="token" name="srcurl" value="download/priha-${version}/priha-${version}-src.zip"/>
		      		<param type="token" name="binurl" value="download/priha-${version}/priha-${version}-bin.zip"/>
		      		<param type="token" name="version" value="${version}"/>
		      		<param type="token" name="srcsize" value="${srcsizemegs}"/>
		      		<param type="token" name="binsize" value="${binsizemegs}"/>
		    	</filterreader>
		  	</filterchain>
		</loadfile>
		
		<replaceregexp file="build/priha-site/WebContent/download.html"
			flags="gs"
			match="&lt;!-- STARTMAGIC -->(.*)&lt;!-- ENDMAGIC -->"
			replace="&lt;!-- STARTMAGIC -->${message}&lt;!-- ENDMAGIC -->"/>
		
		<echo>
			OK, I'm done.  Please examine the contents of build/priha-site/WebContent/download.html
			prior to checking in the code with "svn commit".
		</echo>
	</target>

	<!-- This set of properties installs Apache Ivy -->
	
	<property name="ivy.install.version" value="2.1.0" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
	   <isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<target name="download-ivy" unless="offline">

	     <mkdir dir="${ivy.jar.dir}"/>
	     <!-- download Ivy from web site so that it can be used even without any special installation -->
	     <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
	          dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="init-ivy" depends="download-ivy">
	  <!-- try to load ivy here from ivy home, in case the user has not already dropped
	          it into ant's lib dir (note that the latter copy will always take precedence).
	          We will not fail as long as local lib dir exists (it may be empty) and
	          ivy is in at least one of ant's lib dir or the local lib dir. -->
	    <path id="ivy.lib.path">
	        <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

	    </path>
	    <taskdef resource="org/apache/ivy/ant/antlib.xml"
	             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

</project>
