
Configuring Priha
=================

TBD

THE PROPERTY FILE
=================

By default, Priha looks for the "priha.properties" file from your classpath, both
under the classpath root as well as /WEB-INF/.


Providers
---------

Priha supports multiple physical providers, however, they are probably fairly
useless to most people.  Here is how you configure a single provider:

First, you define a provider and give it a nickname; in the following example
it's "myProvider".

    priha.provider.myProvider.class = org.mycompany.priha.MyProvider

You can also define more properties to your provider.  These are appended
to the nick.

    priha.provider.myProvider.param1 = value1

This would be passed to the MyProvider instance as "param1" with a value of "value1".

Finally, you declare which provider you want to use by listing its nickname in the
"priha.providers" parameter.

    priha.providers = myProvider


Multiple workspaces
-------------------

Some providers can provide multiple workspaces.  You can easily add more
workspaces by declaring them in the property file as well, by using the
"workspaces" property.  For example, to have two workspaces, "default" and
"test", add the following:

   priha.provider.myProvider.workspaces = default test
   
Note that in the absences of this declaration, there is always a workspace
called "default".  When the user calls Session.login() with no parameters,
the "default" workspace is used.  However, if you do define the workspaces
in your config, then you must remember to declare the default workspace as
well (or else Session.login() will fail to work).

Also, you may only define a workspace once - these are unique across a set
of providers.


The defaultProvider
-------------------

The nickname "defaultProvider" is reserved for the built-in default provider
(which is a FileProvider).  You can look at the FileProvider javadocs to
see what configuration options it has.

Priha uses the defaultProvider in the absence of any other "priha.providers" line.


Multiple providers
------------------

It is fairly easy to configure multiple providers; first, you need to define
several RepositoryProvider instances.  In this case, we define one with
your company provider to store most of your content, and then we'll set up
a FileProvider to store your large files (stored in the attachments workspace).

   priha.provider.myProvider.class = org.mycompany.priha.MyProvider
   priha.provider.myProvider.workspaces = default
   
   priha.provider.myOtherProvider.class = org.priha.providers.FileProvider
   priha.provider.myOtherProvider.workspaces = attachments
   
Then we'll set up the provider list:

   priha.providers = myOtherProvider myProvider



Setting up caching
------------------

Caches are just special RepositoryProviders, who sit between the main Priha
content management, and on top of the real providers.  Your provider might
then use some additional caching, but in most cases Priha caching should
be more efficient.

The cache is set up per provider.  Here's how you configure Ehcache using
the built-in EhCachingProvider and the built-in default provider:

   priha.provider.ehcache.class = org.priha.providers.EhCachingProvider
   priha.provider.ehcache.realProvider = defaultProvider
   priha.provider.ehcache.size = 5000

   priha.providers = ehcache

Of course, you can take the multi-provider approach as well.  This example
defines two providers, and caches all the calls to a MyProvider, but leaves
all calls to a FileProvider uncached.

   priha.provider.myProvider.class = org.mycompany.priha.MyProvider
   
   priha.provider.myOtherProvider.class = org.priha.providers.FileProvider
   priha.provider.myOtherProvider.workspaces = largefiles

   priha.provider.ehcache.class = org.priha.providers.EhCachingProvider
   priha.provider.ehcache.realProvider = myProvider
   priha.provider.ehcache.size = 1000
   priha.provider.ehcache.workspaces = default

   priha.providers = myOtherProvider ehcache

Note that if you want to have different caches for different providers, they
must have different names - otherwise Priha will happily reuse the same
EhCache object!  Please see EhCachingProvider javadoc for further discussion.

Notice also that the workspace definitions are only used for those providers
that you actually define on the "priha.providers" line.  If you use a caching
provider, it will automatically pass down the workspace list to the underlying
provider.


LOGGING
=======

Priha uses the Java 5 "java.util.logging" package.  Yes, it could use commons-logging
or slf4j (which is an awesome package), but one of the goals was to reduce the amount 
of external library dependencies.  So there.
