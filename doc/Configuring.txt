
Configuring Priha
=================

TBD

THE PROPERTY FILE
=================

By default, Priha looks for the "priha.properties" file from your classpath, both
under the classpath root as well as /WEB-INF/.


Providers
---------

Priha supports multiple physical providers, however, they are probably fairly
useless to most people.  Here is how you configure a single provider:

First, you define a provider and give it a nickname; in the following example
it's "myProvider".

    priha.provider.myProvider.class = org.mycompany.priha.MyProvider

You can also define more properties to your provider.  These are appended
to the nick.

    priha.provider.myProvider.param1 = value1

This would be passed to the MyProvider instance as "param1" with a value of "value1".

Finally, you declare which provider you want to use by listing its nickname in the
"priha.providers" parameter.

    priha.providers = myProvider



The defaultProvider
-------------------

The nickname "defaultProvider" is reserved for the built-in default provider
(which is a FileProvider).  You can look at the FileProvider javadocs to
see what configuration options it has.

Priha uses the defaultProvider in the absence of any other "priha.providers" line.


Multiple providers
------------------

It is fairly easy to configure multiple providers; first, you need to define
several RepositoryProvider instances.  In this case, we define one with
your company provider to store most of your content, and then we'll set up
a FileProvider to store your large files (stored under /largefiles/).

   priha.provider.myProvider.class = org.mycompany.priha.MyProvider
   priha.provider.myProvider.prefix = /
   
   priha.provider.myOtherProvider.class = org.jspwiki.priha.providers.FileProvider
   priha.provider.myOtherProvider.prefix = /largefiles/
   
Then we'll set up the provider list:

   priha.providers = myOtherProvider myProvider
   
Note the order - the most specific one must come first!  If your provider
does not seem to be called properly, please check the order.



Setting up caching
------------------

Caches are just special RepositoryProviders, who sit between the main Priha
content management, and on top of the real providers.  Your provider might
then use some additional caching, but in most cases Priha caching should
be more efficient.

The cache is set up per provider.  Here's how you configure Ehcache using
the built-in EhCachingProvider and the built-in default provider:

   priha.provider.ehcache.class = org.jspwiki.priha.providers.EhCachingProvider
   priha.provider.ehcache.realProvider = defaultProvider
   priha.provider.ehcache.size = 5000

   priha.providers = ehcache

Of course, you can take the multi-provider approach as well.  This example
defines two providers, and caches all the calls to a MyProvider, but leaves
all calls to a FileProvider uncached.

   priha.provider.myProvider.class = org.mycompany.priha.MyProvider
   priha.provider.myProvider.prefix = /
   
   priha.provider.myOtherProvider.class = org.jspwiki.priha.providers.FileProvider
   priha.provider.myOtherProvider.prefix = /largefiles/

   priha.provider.ehcache.class = org.jspwiki.priha.providers.EhCachingProvider
   priha.provider.ehcache.realProvider = myProvider
   priha.provider.ehcache.size = 1000

   priha.providers = myOtherProvider ehcache

Note that if you want to have different caches for different providers, they
must have different names - otherwise Priha will happily reuse the same
EhCache object!  Please see EhCachingProvider javadoc for further discussion.

LOGGING
=======

Priha uses the Java 5 "java.util.logging" package.  Yes, it could use commons-logging,
but one of the goals was to reduce the amount of external library dependencies.
So there.
