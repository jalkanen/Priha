
Developing your own Providers, a quick introduction

(Please note that this document concerns an API which is not yet frozen
by any means.)

        ---------------------------------------------------

Priha has a lot of layering to accommodate for the Session-Repository
split that JCR does. However, most of the time, if you wish to connect to
your own backend, you don't need to care about that.

The chief interface to implement is called RepositoryProvider, and that
abstracts whatever filesystem/DB you have against the Priha concepts.

Priha abstracts the repository at a fairly high level.  This means that a
RepositoryProvider class will need to understand some basics of the JCR
Repository structure.

The Javadocs of the RepositoryProvider class should be fairly comprehensive,
so those should be reviewed before attempt to implement anything.


The Lifecycle
=============

When Priha starts, it calls start() on your provider.  When it shuts down,
it calls stop().  It is possible that stop() is not closed if the JVM crashes.

Whenever someone performs a Repository.login(), Priha calls open() on your
provider.  Whenever logout() is called, it calls close().


Loading Data
============

The RepositoryProvider is expected to construct a new ValueImpl (or a ValueImpl
array in case of a multi-valued Property) and return it whenever getPropertyValue()
is called.

It should be noted that according to JCR rules, *new* Value objects should
always be constructed - you can't reuse any old ones you might be having around.
You can reuse the data, but not the Value objects.

All methods relating to reading data must be threadsafe - Priha allows multiple
threads to access the repository.  So if your reading methods cause anything
to written, make sure they're synchronized properly.


Saving Data
===========

Whenever Priha starts sending your provider data to save, it will call
first the storeStarted() method, and after that, a number of putPropertyValue()
methods.  Once they've been all sent through, a storeFinished() call is made.

At the moment, Priha will make sure of synchronization, that is, between 
storeStarted() and storeFinished() no other reads or writes will take place.  
Yes, this means that writes may slow down the operation of the entire app so 
make it snappy.

You may ignore the storeStarted() and storeFinished() calls, if you so please.
However, if saving fails for some reason, make sure that your data structures
don't get corrupted.  A good idea is to collect everything into a big list and
just flush stuff on the disk at storeFinished().

