/* Generated By:JJTree&JavaCC: Do not edit this line. XPathConstants.java */
package org.priha.query.aqt.xpath;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface XPathConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IntegerLiteral = 1;
  /** RegularExpression Id. */
  int DecimalLiteral = 2;
  /** RegularExpression Id. */
  int DoubleLiteral = 3;
  /** RegularExpression Id. */
  int StringLiteral = 4;
  /** RegularExpression Id. */
  int StringLiteralForKindTest = 5;
  /** RegularExpression Id. */
  int XQueryVersion = 6;
  /** RegularExpression Id. */
  int StringLiteralForVersion = 7;
  /** RegularExpression Id. */
  int XQueryEncoding = 8;
  /** RegularExpression Id. */
  int AtStringLiteral = 9;
  /** RegularExpression Id. */
  int URLLiteral = 10;
  /** RegularExpression Id. */
  int ModuleNamespace = 11;
  /** RegularExpression Id. */
  int skip_ = 13;
  /** RegularExpression Id. */
  int NotOccurrenceIndicator = 14;
  /** RegularExpression Id. */
  int ProcessingInstructionStart = 15;
  /** RegularExpression Id. */
  int ProcessingInstructionStartForElementContent = 16;
  /** RegularExpression Id. */
  int ProcessingInstructionEnd = 17;
  /** RegularExpression Id. */
  int AxisChild = 18;
  /** RegularExpression Id. */
  int AxisDescendant = 19;
  /** RegularExpression Id. */
  int AxisParent = 20;
  /** RegularExpression Id. */
  int AxisAttribute = 21;
  /** RegularExpression Id. */
  int AxisSelf = 22;
  /** RegularExpression Id. */
  int AxisDescendantOrSelf = 23;
  /** RegularExpression Id. */
  int AxisAncestor = 24;
  /** RegularExpression Id. */
  int AxisFollowingSibling = 25;
  /** RegularExpression Id. */
  int AxisPrecedingSibling = 26;
  /** RegularExpression Id. */
  int AxisFollowing = 27;
  /** RegularExpression Id. */
  int AxisPreceding = 28;
  /** RegularExpression Id. */
  int AxisAncestorOrSelf = 29;
  /** RegularExpression Id. */
  int DefineFunction = 30;
  /** RegularExpression Id. */
  int DeclareOrdering = 31;
  /** RegularExpression Id. */
  int Ordered = 32;
  /** RegularExpression Id. */
  int Unordered = 33;
  /** RegularExpression Id. */
  int DeclareDefaultOrderingEmpty = 34;
  /** RegularExpression Id. */
  int DeclareInheritNamespaces = 35;
  /** RegularExpression Id. */
  int Yes = 36;
  /** RegularExpression Id. */
  int No = 37;
  /** RegularExpression Id. */
  int External = 38;
  /** RegularExpression Id. */
  int Or = 39;
  /** RegularExpression Id. */
  int And = 40;
  /** RegularExpression Id. */
  int Div = 41;
  /** RegularExpression Id. */
  int Idiv = 42;
  /** RegularExpression Id. */
  int Mod = 43;
  /** RegularExpression Id. */
  int Multiply = 44;
  /** RegularExpression Id. */
  int In = 45;
  /** RegularExpression Id. */
  int PITarget = 46;
  /** RegularExpression Id. */
  int Prefix = 47;
  /** RegularExpression Id. */
  int LocalPart = 48;
  /** RegularExpression Id. */
  int VariableIndicator = 49;
  /** RegularExpression Id. */
  int VarName = 50;
  /** RegularExpression Id. */
  int ValidationMode = 51;
  /** RegularExpression Id. */
  int SchemaModeForDeclareConstruction = 52;
  /** RegularExpression Id. */
  int Nillable = 53;
  /** RegularExpression Id. */
  int DeclareConstruction = 54;
  /** RegularExpression Id. */
  int Satisfies = 55;
  /** RegularExpression Id. */
  int Return = 56;
  /** RegularExpression Id. */
  int Then = 57;
  /** RegularExpression Id. */
  int Else = 58;
  /** RegularExpression Id. */
  int Default = 59;
  /** RegularExpression Id. */
  int DeclareXMLSpace = 60;
  /** RegularExpression Id. */
  int DeclareBaseURI = 61;
  /** RegularExpression Id. */
  int XMLSpacePreserve = 62;
  /** RegularExpression Id. */
  int XMLSpaceStrip = 63;
  /** RegularExpression Id. */
  int Namespace = 64;
  /** RegularExpression Id. */
  int DeclareNamespace = 65;
  /** RegularExpression Id. */
  int To = 66;
  /** RegularExpression Id. */
  int Where = 67;
  /** RegularExpression Id. */
  int Collation = 68;
  /** RegularExpression Id. */
  int Intersect = 69;
  /** RegularExpression Id. */
  int Union = 70;
  /** RegularExpression Id. */
  int Except = 71;
  /** RegularExpression Id. */
  int As = 72;
  /** RegularExpression Id. */
  int AtWord = 73;
  /** RegularExpression Id. */
  int Case = 74;
  /** RegularExpression Id. */
  int Instanceof = 75;
  /** RegularExpression Id. */
  int Castable = 76;
  /** RegularExpression Id. */
  int RparAs = 77;
  /** RegularExpression Id. */
  int Item = 78;
  /** RegularExpression Id. */
  int ElementType = 79;
  /** RegularExpression Id. */
  int AttributeType = 80;
  /** RegularExpression Id. */
  int SchemaElementType = 81;
  /** RegularExpression Id. */
  int SchemaAttributeType = 82;
  /** RegularExpression Id. */
  int OrderedOpen = 83;
  /** RegularExpression Id. */
  int UnorderedOpen = 84;
  /** RegularExpression Id. */
  int ElementQNameLbrace = 85;
  /** RegularExpression Id. */
  int AttributeQNameLbrace = 86;
  /** RegularExpression Id. */
  int PINCNameLbrace = 87;
  /** RegularExpression Id. */
  int PILbrace = 88;
  /** RegularExpression Id. */
  int CommentLbrace = 89;
  /** RegularExpression Id. */
  int ElementLbrace = 90;
  /** RegularExpression Id. */
  int AttributeLbrace = 91;
  /** RegularExpression Id. */
  int TextLbrace = 92;
  /** RegularExpression Id. */
  int DeclareCollation = 93;
  /** RegularExpression Id. */
  int DefaultElement = 94;
  /** RegularExpression Id. */
  int DeclareDefaultElement = 95;
  /** RegularExpression Id. */
  int DeclareDefaultFunction = 96;
  /** RegularExpression Id. */
  int EmptyTok = 97;
  /** RegularExpression Id. */
  int ImportSchemaToken = 98;
  /** RegularExpression Id. */
  int ImportModuleToken = 99;
  /** RegularExpression Id. */
  int Nmstart = 100;
  /** RegularExpression Id. */
  int Nmchar = 101;
  /** RegularExpression Id. */
  int Star = 102;
  /** RegularExpression Id. */
  int AnyName = 103;
  /** RegularExpression Id. */
  int NCNameColonStar = 104;
  /** RegularExpression Id. */
  int StarColonNCName = 105;
  /** RegularExpression Id. */
  int Root = 106;
  /** RegularExpression Id. */
  int RootDescendants = 107;
  /** RegularExpression Id. */
  int Slash = 108;
  /** RegularExpression Id. */
  int SlashSlash = 109;
  /** RegularExpression Id. */
  int Equals = 110;
  /** RegularExpression Id. */
  int AssignEquals = 111;
  /** RegularExpression Id. */
  int Is = 112;
  /** RegularExpression Id. */
  int NotEquals = 113;
  /** RegularExpression Id. */
  int LtEquals = 114;
  /** RegularExpression Id. */
  int LtLt = 115;
  /** RegularExpression Id. */
  int GtEquals = 116;
  /** RegularExpression Id. */
  int GtGt = 117;
  /** RegularExpression Id. */
  int FortranEq = 118;
  /** RegularExpression Id. */
  int FortranNe = 119;
  /** RegularExpression Id. */
  int FortranGt = 120;
  /** RegularExpression Id. */
  int FortranGe = 121;
  /** RegularExpression Id. */
  int FortranLt = 122;
  /** RegularExpression Id. */
  int FortranLe = 123;
  /** RegularExpression Id. */
  int ColonEquals = 124;
  /** RegularExpression Id. */
  int Lt = 125;
  /** RegularExpression Id. */
  int Gt = 126;
  /** RegularExpression Id. */
  int Minus = 127;
  /** RegularExpression Id. */
  int Plus = 128;
  /** RegularExpression Id. */
  int UnaryMinus = 129;
  /** RegularExpression Id. */
  int UnaryPlus = 130;
  /** RegularExpression Id. */
  int OccurrenceZeroOrOne = 131;
  /** RegularExpression Id. */
  int OccurrenceZeroOrMore = 132;
  /** RegularExpression Id. */
  int OccurrenceOneOrMore = 133;
  /** RegularExpression Id. */
  int Vbar = 134;
  /** RegularExpression Id. */
  int Lpar = 135;
  /** RegularExpression Id. */
  int At = 136;
  /** RegularExpression Id. */
  int Lbrack = 137;
  /** RegularExpression Id. */
  int Rbrack = 138;
  /** RegularExpression Id. */
  int Rpar = 139;
  /** RegularExpression Id. */
  int RparForKindTest = 140;
  /** RegularExpression Id. */
  int Some = 141;
  /** RegularExpression Id. */
  int Every = 142;
  /** RegularExpression Id. */
  int ForVariable = 143;
  /** RegularExpression Id. */
  int LetVariable = 144;
  /** RegularExpression Id. */
  int CastAs = 145;
  /** RegularExpression Id. */
  int TreatAs = 146;
  /** RegularExpression Id. */
  int ValidateLbrace = 147;
  /** RegularExpression Id. */
  int ValidateSchemaMode = 148;
  /** RegularExpression Id. */
  int Digits = 149;
  /** RegularExpression Id. */
  int DocumentLpar = 150;
  /** RegularExpression Id. */
  int DocumentLparForKindTest = 151;
  /** RegularExpression Id. */
  int DocumentLbrace = 152;
  /** RegularExpression Id. */
  int NodeLpar = 153;
  /** RegularExpression Id. */
  int CommentLpar = 154;
  /** RegularExpression Id. */
  int TextLpar = 155;
  /** RegularExpression Id. */
  int ProcessingInstructionLpar = 156;
  /** RegularExpression Id. */
  int ElementTypeForKindTest = 157;
  /** RegularExpression Id. */
  int ElementTypeForDocumentTest = 158;
  /** RegularExpression Id. */
  int AttributeTypeForKindTest = 159;
  /** RegularExpression Id. */
  int SchemaElementTypeForKindTest = 160;
  /** RegularExpression Id. */
  int SchemaElementTypeForDocumentTest = 161;
  /** RegularExpression Id. */
  int SchemaAttributeTypeForKindTest = 162;
  /** RegularExpression Id. */
  int ProcessingInstructionLparForKindTest = 163;
  /** RegularExpression Id. */
  int TextLparForKindTest = 164;
  /** RegularExpression Id. */
  int CommentLparForKindTest = 165;
  /** RegularExpression Id. */
  int NodeLparForKindTest = 166;
  /** RegularExpression Id. */
  int IfLpar = 167;
  /** RegularExpression Id. */
  int TypeswitchLpar = 168;
  /** RegularExpression Id. */
  int Comma = 169;
  /** RegularExpression Id. */
  int CommaForKindTest = 170;
  /** RegularExpression Id. */
  int SemiColon = 171;
  /** RegularExpression Id. */
  int QuerySeparator = 172;
  /** RegularExpression Id. */
  int OpenQuot = 173;
  /** RegularExpression Id. */
  int CloseQuot = 174;
  /** RegularExpression Id. */
  int Dot = 175;
  /** RegularExpression Id. */
  int DotDot = 176;
  /** RegularExpression Id. */
  int OrderBy = 177;
  /** RegularExpression Id. */
  int OrderByStable = 178;
  /** RegularExpression Id. */
  int Ascending = 179;
  /** RegularExpression Id. */
  int Descending = 180;
  /** RegularExpression Id. */
  int EmptyGreatest = 181;
  /** RegularExpression Id. */
  int EmptyLeast = 182;
  /** RegularExpression Id. */
  int DefineVariable = 183;
  /** RegularExpression Id. */
  int QNameForSequenceType = 184;
  /** RegularExpression Id. */
  int QNameForAtomicType = 185;
  /** RegularExpression Id. */
  int QNameForItemType = 186;
  /** RegularExpression Id. */
  int ExtensionQName = 187;
  /** RegularExpression Id. */
  int QNameLpar = 188;
  /** RegularExpression Id. */
  int NCNameForPrefix = 189;
  /** RegularExpression Id. */
  int NCNameForPI = 190;
  /** RegularExpression Id. */
  int CdataSectionStart = 191;
  /** RegularExpression Id. */
  int CdataSectionStartForElementContent = 192;
  /** RegularExpression Id. */
  int CdataSectionEnd = 193;
  /** RegularExpression Id. */
  int PredefinedEntityRef = 194;
  /** RegularExpression Id. */
  int CharRef = 195;
  /** RegularExpression Id. */
  int HexDigits = 196;
  /** RegularExpression Id. */
  int StartTagOpen = 197;
  /** RegularExpression Id. */
  int StartTagOpenRoot = 198;
  /** RegularExpression Id. */
  int StartTagClose = 199;
  /** RegularExpression Id. */
  int EmptyTagClose = 200;
  /** RegularExpression Id. */
  int EndTagOpen = 201;
  /** RegularExpression Id. */
  int EndTagClose = 202;
  /** RegularExpression Id. */
  int ValueIndicator = 203;
  /** RegularExpression Id. */
  int TagQName = 204;
  /** RegularExpression Id. */
  int Lbrace = 205;
  /** RegularExpression Id. */
  int LbraceExprEnclosure = 206;
  /** RegularExpression Id. */
  int LCurlyBraceEscape = 207;
  /** RegularExpression Id. */
  int RCurlyBraceEscape = 208;
  /** RegularExpression Id. */
  int EscapeQuot = 209;
  /** RegularExpression Id. */
  int EscapeApos = 210;
  /** RegularExpression Id. */
  int ElementContentChar = 211;
  /** RegularExpression Id. */
  int QuotAttrContentChar = 212;
  /** RegularExpression Id. */
  int AposAttrContentChar = 213;
  /** RegularExpression Id. */
  int CommentContentChar = 214;
  /** RegularExpression Id. */
  int CommentContentCharDash = 215;
  /** RegularExpression Id. */
  int PIContentChar = 216;
  /** RegularExpression Id. */
  int CDataSectionChar = 217;
  /** RegularExpression Id. */
  int OpenApos = 218;
  /** RegularExpression Id. */
  int CloseApos = 219;
  /** RegularExpression Id. */
  int Pragma = 220;
  /** RegularExpression Id. */
  int MUExtension = 221;
  /** RegularExpression Id. */
  int ExtensionContents = 222;
  /** RegularExpression Id. */
  int ExtensionStart = 223;
  /** RegularExpression Id. */
  int ExtensionContentChar = 224;
  /** RegularExpression Id. */
  int ExtensionEnd = 225;
  /** RegularExpression Id. */
  int Comment = 226;
  /** RegularExpression Id. */
  int CommentContents = 227;
  /** RegularExpression Id. */
  int CommentStart = 228;
  /** RegularExpression Id. */
  int CommentContent = 229;
  /** RegularExpression Id. */
  int CommentEnd = 230;
  /** RegularExpression Id. */
  int PragmaKeyword = 231;
  /** RegularExpression Id. */
  int Extension = 232;
  /** RegularExpression Id. */
  int XmlCommentStart = 233;
  /** RegularExpression Id. */
  int XmlCommentStartForElementContent = 234;
  /** RegularExpression Id. */
  int XmlCommentEnd = 235;
  /** RegularExpression Id. */
  int QName = 236;
  /** RegularExpression Id. */
  int NCName = 237;
  /** RegularExpression Id. */
  int S = 238;
  /** RegularExpression Id. */
  int SForPI = 239;
  /** RegularExpression Id. */
  int SForExt = 240;
  /** RegularExpression Id. */
  int Char = 241;
  /** RegularExpression Id. */
  int Rbrace = 242;
  /** RegularExpression Id. */
  int WhitespaceChar = 243;
  /** RegularExpression Id. */
  int Letter = 244;
  /** RegularExpression Id. */
  int BaseChar = 245;
  /** RegularExpression Id. */
  int Ideographic = 246;
  /** RegularExpression Id. */
  int CombiningChar = 247;
  /** RegularExpression Id. */
  int Digit = 248;
  /** RegularExpression Id. */
  int Extender = 249;
  /** RegularExpression Id. */
  int NotOperatorKeyword = 250;
  /** RegularExpression Id. */
  int NotNumber = 251;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int KINDTESTFORPI = 1;
  /** Lexical state. */
  int XQUERYVERSION = 2;
  /** Lexical state. */
  int NAMESPACEDECL = 3;
  /** Lexical state. */
  int OPERATOR = 4;
  /** Lexical state. */
  int KINDTEST = 5;
  /** Lexical state. */
  int XMLSPACE_DECL = 6;
  /** Lexical state. */
  int SINGLETYPE = 7;
  /** Lexical state. */
  int ITEMTYPE = 8;
  /** Lexical state. */
  int NAMESPACEKEYWORD = 9;
  /** Lexical state. */
  int VARNAME = 10;
  /** Lexical state. */
  int OCCURRENCEINDICATOR = 11;
  /** Lexical state. */
  int CLOSEKINDTEST = 12;
  /** Lexical state. */
  int ELEMENT_CONTENT = 13;
  /** Lexical state. */
  int PROCESSING_INSTRUCTION = 14;
  /** Lexical state. */
  int START_TAG = 15;
  /** Lexical state. */
  int QUOT_ATTRIBUTE_CONTENT = 16;
  /** Lexical state. */
  int EXT_NAME = 17;
  /** Lexical state. */
  int CDATA_SECTION = 18;
  /** Lexical state. */
  int END_TAG = 19;
  /** Lexical state. */
  int APOS_ATTRIBUTE_CONTENT = 20;
  /** Lexical state. */
  int XML_COMMENT = 21;
  /** Lexical state. */
  int PROCESSING_INSTRUCTION_CONTENT = 22;
  /** Lexical state. */
  int EXT_CONTENT = 23;
  /** Lexical state. */
  int EXPR_COMMENT = 24;
  /** Lexical state. */
  int EXT_KEY = 25;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<IntegerLiteral>",
    "<DecimalLiteral>",
    "<DoubleLiteral>",
    "<StringLiteral>",
    "<StringLiteralForKindTest>",
    "<XQueryVersion>",
    "<StringLiteralForVersion>",
    "\"encoding\"",
    "<AtStringLiteral>",
    "<URLLiteral>",
    "<ModuleNamespace>",
    "<token of kind 12>",
    "<skip_>",
    "<NotOccurrenceIndicator>",
    "\"<?\"",
    "\"<?\"",
    "\"?>\"",
    "<AxisChild>",
    "<AxisDescendant>",
    "<AxisParent>",
    "<AxisAttribute>",
    "<AxisSelf>",
    "<AxisDescendantOrSelf>",
    "<AxisAncestor>",
    "<AxisFollowingSibling>",
    "<AxisPrecedingSibling>",
    "<AxisFollowing>",
    "<AxisPreceding>",
    "<AxisAncestorOrSelf>",
    "<DefineFunction>",
    "<DeclareOrdering>",
    "\"ordered\"",
    "\"unordered\"",
    "<DeclareDefaultOrderingEmpty>",
    "<DeclareInheritNamespaces>",
    "\"yes\"",
    "\"no\"",
    "\"external\"",
    "\"or\"",
    "\"and\"",
    "\"div\"",
    "\"idiv\"",
    "\"mod\"",
    "\"*\"",
    "\"in\"",
    "<PITarget>",
    "<Prefix>",
    "<LocalPart>",
    "\"$\"",
    "<VarName>",
    "<ValidationMode>",
    "<SchemaModeForDeclareConstruction>",
    "\"?\"",
    "<DeclareConstruction>",
    "\"satisfies\"",
    "\"return\"",
    "\"then\"",
    "\"else\"",
    "\"default\"",
    "<DeclareXMLSpace>",
    "<DeclareBaseURI>",
    "\"preserve\"",
    "\"strip\"",
    "\"namespace\"",
    "<DeclareNamespace>",
    "\"to\"",
    "\"where\"",
    "\"collation\"",
    "\"intersect\"",
    "\"union\"",
    "\"except\"",
    "\"as\"",
    "\"at\"",
    "\"case\"",
    "<Instanceof>",
    "<Castable>",
    "<RparAs>",
    "<Item>",
    "<ElementType>",
    "<AttributeType>",
    "<SchemaElementType>",
    "<SchemaAttributeType>",
    "<OrderedOpen>",
    "<UnorderedOpen>",
    "<ElementQNameLbrace>",
    "<AttributeQNameLbrace>",
    "<PINCNameLbrace>",
    "<PILbrace>",
    "<CommentLbrace>",
    "<ElementLbrace>",
    "<AttributeLbrace>",
    "<TextLbrace>",
    "<DeclareCollation>",
    "<DefaultElement>",
    "<DeclareDefaultElement>",
    "<DeclareDefaultFunction>",
    "<EmptyTok>",
    "<ImportSchemaToken>",
    "<ImportModuleToken>",
    "<Nmstart>",
    "<Nmchar>",
    "\"*\"",
    "\"*\"",
    "<NCNameColonStar>",
    "<StarColonNCName>",
    "\"/\"",
    "\"//\"",
    "\"/\"",
    "\"//\"",
    "\"=\"",
    "\"=\"",
    "\"is\"",
    "\"!=\"",
    "\"<=\"",
    "\"<<\"",
    "\">=\"",
    "\">>\"",
    "\"eq\"",
    "\"ne\"",
    "\"gt\"",
    "\"ge\"",
    "\"lt\"",
    "\"le\"",
    "\":=\"",
    "\"<\"",
    "\">\"",
    "\"-\"",
    "\"+\"",
    "\"-\"",
    "\"+\"",
    "\"?\"",
    "\"*\"",
    "\"+\"",
    "\"|\"",
    "\"(\"",
    "\"@\"",
    "\"[\"",
    "\"]\"",
    "\")\"",
    "\")\"",
    "<Some>",
    "<Every>",
    "<ForVariable>",
    "<LetVariable>",
    "<CastAs>",
    "<TreatAs>",
    "<ValidateLbrace>",
    "<ValidateSchemaMode>",
    "<Digits>",
    "<DocumentLpar>",
    "<DocumentLparForKindTest>",
    "<DocumentLbrace>",
    "<NodeLpar>",
    "<CommentLpar>",
    "<TextLpar>",
    "<ProcessingInstructionLpar>",
    "<ElementTypeForKindTest>",
    "<ElementTypeForDocumentTest>",
    "<AttributeTypeForKindTest>",
    "<SchemaElementTypeForKindTest>",
    "<SchemaElementTypeForDocumentTest>",
    "<SchemaAttributeTypeForKindTest>",
    "<ProcessingInstructionLparForKindTest>",
    "<TextLparForKindTest>",
    "<CommentLparForKindTest>",
    "<NodeLparForKindTest>",
    "<IfLpar>",
    "<TypeswitchLpar>",
    "\",\"",
    "\",\"",
    "\";\"",
    "\"%%%\"",
    "\"\\\"\"",
    "\"\\\"\"",
    "\".\"",
    "\"..\"",
    "<OrderBy>",
    "<OrderByStable>",
    "\"ascending\"",
    "\"descending\"",
    "<EmptyGreatest>",
    "<EmptyLeast>",
    "<DefineVariable>",
    "<QNameForSequenceType>",
    "<QNameForAtomicType>",
    "<QNameForItemType>",
    "<ExtensionQName>",
    "<QNameLpar>",
    "<NCNameForPrefix>",
    "<NCNameForPI>",
    "\"<![CDATA[\"",
    "\"<![CDATA[\"",
    "<CdataSectionEnd>",
    "<PredefinedEntityRef>",
    "<CharRef>",
    "<HexDigits>",
    "\"<\"",
    "\"<\"",
    "\">\"",
    "\"/>\"",
    "\"</\"",
    "\">\"",
    "\"=\"",
    "<TagQName>",
    "\"{\"",
    "\"{\"",
    "\"{{\"",
    "\"}}\"",
    "\"\\\"\\\"\"",
    "\"\\\'\\\'\"",
    "<ElementContentChar>",
    "<QuotAttrContentChar>",
    "<AposAttrContentChar>",
    "<CommentContentChar>",
    "<CommentContentCharDash>",
    "<PIContentChar>",
    "<CDataSectionChar>",
    "\"\\\'\"",
    "\"\\\'\"",
    "<Pragma>",
    "<MUExtension>",
    "<ExtensionContents>",
    "\"(::\"",
    "<ExtensionContentChar>",
    "\"::)\"",
    "<Comment>",
    "<CommentContents>",
    "\"(:\"",
    "<CommentContent>",
    "\":)\"",
    "\"pragma\"",
    "\"extension\"",
    "\"<!--\"",
    "\"<!--\"",
    "\"-->\"",
    "<QName>",
    "<NCName>",
    "<S>",
    "<SForPI>",
    "<SForExt>",
    "<Char>",
    "\"}\"",
    "<WhitespaceChar>",
    "<Letter>",
    "<BaseChar>",
    "<Ideographic>",
    "<CombiningChar>",
    "<Digit>",
    "<Extender>",
    "<NotOperatorKeyword>",
    "<NotNumber>",
  };

}
